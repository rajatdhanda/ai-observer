#!/usr/bin/env node

const path = require('path');
const { spawn } = require('child_process');

// Parse arguments
const args = process.argv.slice(2);
const command = args[0];
const watchMode = args.includes('--watch') || args.includes('-w');
const projectPath = args.find(arg => !arg.startsWith('-') && arg !== 'dashboard') || process.cwd();

if (command === 'dashboard') {
  // Start BOTH observer + dashboard in one command (80-20 rule)
  console.log('🔍 Starting AI Observer with Dashboard...');
  console.log('   📊 Dashboard: http://localhost:3001/modular-fixed');
  console.log('   🤖 Observer: Running every 5 minutes');
  console.log('');
  
  // Start observer in background
  const observerPath = path.join(__dirname, 'ai-observe');
  const observer = spawn('node', [observerPath], {
    stdio: ['ignore', 'pipe', 'pipe'],
    cwd: projectPath,
    env: { ...process.env, OBSERVER_PROJECT_PATH: projectPath }
  });
  
  // Start dashboard server
  const dashboardPath = path.join(__dirname, '..', 'dist', 'dashboard', 'index.js');
  const dashboard = spawn('node', [dashboardPath], {
    stdio: 'inherit',
    cwd: projectPath,
    env: { ...process.env, OBSERVER_PROJECT_PATH: projectPath }
  });
  
  // Handle observer output
  observer.stdout.on('data', (data) => {
    process.stdout.write(`[Observer] ${data}`);
  });
  
  observer.stderr.on('data', (data) => {
    process.stderr.write(`[Observer] ${data}`);
  });
  
  // Cleanup on exit
  process.on('SIGINT', () => {
    console.log('\n👋 Shutting down AI Observer...');
    observer.kill('SIGTERM');
    dashboard.kill('SIGTERM');
    process.exit(0);
  });
  
  dashboard.on('exit', (code) => {
    observer.kill('SIGTERM');
    process.exit(code || 0);
  });
  
} else if (watchMode) {
  // Run the observer for continuous monitoring
  console.log('🔍 Starting continuous monitoring...');
  const observerPath = path.join(__dirname, 'ai-observe');
  const child = spawn('node', [observerPath], {
    stdio: 'inherit',
    cwd: projectPath,
    env: { ...process.env, OBSERVER_PROJECT_PATH: projectPath }
  });
  
  child.on('exit', (code) => {
    process.exit(code || 0);
  });
} else {
  // Run one-time analysis
  process.env.OBSERVER_PROJECT_PATH = projectPath;
  require(path.join(__dirname, '..', 'dist', 'cli', 'analyze-smart.js'));
}