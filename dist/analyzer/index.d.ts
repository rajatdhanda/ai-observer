export interface ProjectAnalysis {
    projectPath: string;
    projectName: string;
    framework: FrameworkInfo;
    types: TypeSystem;
    dataFlow: DataFlowMap;
    entities: BusinessEntity[];
    validationRules: ValidationRule[];
    timestamp: string;
}
export interface FrameworkInfo {
    name: string;
    version: string;
    type: 'frontend' | 'backend' | 'fullstack';
    dependencies: Record<string, string>;
    scripts: Record<string, string>;
}
export interface TypeSystem {
    interfaces: TypeDefinition[];
    types: TypeDefinition[];
    enums: TypeDefinition[];
    totalCount: number;
    files: string[];
}
export interface TypeDefinition {
    name: string;
    filePath: string;
    properties?: PropertyDefinition[];
    category?: 'database' | 'api' | 'component' | 'state' | 'utility';
}
export interface PropertyDefinition {
    name: string;
    type: string;
    required: boolean;
    description?: string;
}
export interface DataFlowMap {
    layers: Layer[];
    connections: Connection[];
    criticalPaths: CriticalPath[];
}
export interface Layer {
    name: string;
    type: 'database' | 'api' | 'state' | 'ui';
    components: string[];
}
export interface Connection {
    from: string;
    to: string;
    dataType: string;
    method?: string;
}
export interface CriticalPath {
    name: string;
    steps: string[];
    importance: 'high' | 'medium' | 'low';
}
export interface BusinessEntity {
    name: string;
    type: string;
    properties: PropertyDefinition[];
    relationships: Relationship[];
    operations: string[];
}
export interface Relationship {
    type: 'hasOne' | 'hasMany' | 'belongsTo' | 'manyToMany';
    entity: string;
    foreign_key?: string;
}
export interface ValidationRule {
    id: string;
    name: string;
    type: 'type' | 'business' | 'performance' | 'security';
    severity: 'error' | 'warning' | 'info';
    path: string;
    rule: string;
    autoGenerated: boolean;
}
export declare class ProjectAnalyzer {
    private frameworkDetector;
    private typeExtractor;
    private dataFlowMapper;
    private entityIdentifier;
    private ruleGenerator;
    constructor();
    analyze(projectPath: string): Promise<ProjectAnalysis>;
    private saveAnalysis;
    watch(projectPath: string): Promise<void>;
    private shouldAnalyzeFile;
}
//# sourceMappingURL=index.d.ts.map