"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationRuleGenerator = void 0;
var ValidationRuleGenerator = /** @class */ (function () {
    function ValidationRuleGenerator() {
        this.ruleCounter = 0;
    }
    ValidationRuleGenerator.prototype.generate = function (types, entities, dataFlow) {
        return __awaiter(this, void 0, void 0, function () {
            var rules;
            return __generator(this, function (_a) {
                rules = [];
                // Generate type validation rules
                rules.push.apply(rules, this.generateTypeRules(types));
                // Generate business logic rules
                rules.push.apply(rules, this.generateBusinessRules(entities));
                // Generate data flow rules
                rules.push.apply(rules, this.generateDataFlowRules(dataFlow));
                // Generate performance rules
                rules.push.apply(rules, this.generatePerformanceRules(entities));
                // Generate security rules
                rules.push.apply(rules, this.generateSecurityRules(entities, types));
                return [2 /*return*/, rules];
            });
        });
    };
    ValidationRuleGenerator.prototype.generateTypeRules = function (types) {
        var rules = [];
        // Required field validation
        for (var _i = 0, _a = types.interfaces; _i < _a.length; _i++) {
            var iface = _a[_i];
            if (iface.properties) {
                for (var _b = 0, _c = iface.properties; _b < _c.length; _b++) {
                    var prop = _c[_b];
                    if (prop.required) {
                        rules.push({
                            id: this.generateRuleId(),
                            name: "".concat(iface.name, ".").concat(prop.name, " is required"),
                            type: 'type',
                            severity: 'error',
                            path: "".concat(iface.name, ".").concat(prop.name),
                            rule: "".concat(prop.name, " !== null && ").concat(prop.name, " !== undefined"),
                            autoGenerated: true
                        });
                    }
                    // Type checking rules
                    if (prop.type === 'string') {
                        rules.push({
                            id: this.generateRuleId(),
                            name: "".concat(iface.name, ".").concat(prop.name, " must be string"),
                            type: 'type',
                            severity: 'error',
                            path: "".concat(iface.name, ".").concat(prop.name),
                            rule: "typeof ".concat(prop.name, " === 'string'"),
                            autoGenerated: true
                        });
                    }
                    else if (prop.type === 'number') {
                        rules.push({
                            id: this.generateRuleId(),
                            name: "".concat(iface.name, ".").concat(prop.name, " must be number"),
                            type: 'type',
                            severity: 'error',
                            path: "".concat(iface.name, ".").concat(prop.name),
                            rule: "typeof ".concat(prop.name, " === 'number'"),
                            autoGenerated: true
                        });
                    }
                    else if (prop.type === 'boolean') {
                        rules.push({
                            id: this.generateRuleId(),
                            name: "".concat(iface.name, ".").concat(prop.name, " must be boolean"),
                            type: 'type',
                            severity: 'error',
                            path: "".concat(iface.name, ".").concat(prop.name),
                            rule: "typeof ".concat(prop.name, " === 'boolean'"),
                            autoGenerated: true
                        });
                    }
                }
            }
        }
        return rules;
    };
    ValidationRuleGenerator.prototype.generateBusinessRules = function (entities) {
        var rules = [];
        for (var _i = 0, entities_1 = entities; _i < entities_1.length; _i++) {
            var entity = entities_1[_i];
            // Email validation
            var emailProp = entity.properties.find(function (p) {
                return p.name.toLowerCase().includes('email');
            });
            if (emailProp) {
                rules.push({
                    id: this.generateRuleId(),
                    name: "".concat(entity.name, ".").concat(emailProp.name, " must be valid email"),
                    type: 'business',
                    severity: 'error',
                    path: "".concat(entity.name, ".").concat(emailProp.name),
                    rule: "/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(".concat(emailProp.name, ")"),
                    autoGenerated: true
                });
            }
            // Phone validation
            var phoneProp = entity.properties.find(function (p) {
                return p.name.toLowerCase().includes('phone');
            });
            if (phoneProp) {
                rules.push({
                    id: this.generateRuleId(),
                    name: "".concat(entity.name, ".").concat(phoneProp.name, " must be valid phone"),
                    type: 'business',
                    severity: 'warning',
                    path: "".concat(entity.name, ".").concat(phoneProp.name),
                    rule: "/^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/.test(".concat(phoneProp.name, ")"),
                    autoGenerated: true
                });
            }
            // Date validation
            var dateProp = entity.properties.find(function (p) {
                return p.name.toLowerCase().includes('date') ||
                    p.name.toLowerCase().includes('_at');
            });
            if (dateProp) {
                rules.push({
                    id: this.generateRuleId(),
                    name: "".concat(entity.name, ".").concat(dateProp.name, " must be valid date"),
                    type: 'business',
                    severity: 'error',
                    path: "".concat(entity.name, ".").concat(dateProp.name),
                    rule: "!isNaN(new Date(".concat(dateProp.name, ").getTime())"),
                    autoGenerated: true
                });
            }
            // Price/Amount validation
            var priceProp = entity.properties.find(function (p) {
                return p.name.toLowerCase().includes('price') ||
                    p.name.toLowerCase().includes('amount') ||
                    p.name.toLowerCase().includes('cost');
            });
            if (priceProp) {
                rules.push({
                    id: this.generateRuleId(),
                    name: "".concat(entity.name, ".").concat(priceProp.name, " must be positive"),
                    type: 'business',
                    severity: 'error',
                    path: "".concat(entity.name, ".").concat(priceProp.name),
                    rule: "".concat(priceProp.name, " >= 0"),
                    autoGenerated: true
                });
            }
            // Status validation
            var statusProp = entity.properties.find(function (p) {
                return p.name.toLowerCase().includes('status');
            });
            if (statusProp) {
                rules.push({
                    id: this.generateRuleId(),
                    name: "".concat(entity.name, ".").concat(statusProp.name, " must be valid status"),
                    type: 'business',
                    severity: 'error',
                    path: "".concat(entity.name, ".").concat(statusProp.name),
                    rule: "['active', 'inactive', 'pending', 'completed', 'cancelled'].includes(".concat(statusProp.name, ")"),
                    autoGenerated: true
                });
            }
        }
        return rules;
    };
    ValidationRuleGenerator.prototype.generateDataFlowRules = function (dataFlow) {
        var rules = [];
        // API response validation
        var apiLayer = dataFlow.layers.find(function (l) { return l.type === 'api'; });
        if (apiLayer) {
            rules.push({
                id: this.generateRuleId(),
                name: 'API responses must have status code',
                type: 'type',
                severity: 'error',
                path: 'api.response',
                rule: 'response.status !== undefined',
                autoGenerated: true
            });
            rules.push({
                id: this.generateRuleId(),
                name: 'API errors must have message',
                type: 'type',
                severity: 'error',
                path: 'api.error',
                rule: 'error.message !== undefined',
                autoGenerated: true
            });
        }
        // Database query validation
        var dbLayer = dataFlow.layers.find(function (l) { return l.type === 'database'; });
        if (dbLayer) {
            rules.push({
                id: this.generateRuleId(),
                name: 'Database queries must have valid ID',
                type: 'business',
                severity: 'error',
                path: 'database.query',
                rule: 'id !== null && id !== undefined',
                autoGenerated: true
            });
        }
        return rules;
    };
    ValidationRuleGenerator.prototype.generatePerformanceRules = function (entities) {
        var rules = [];
        // Large list pagination
        for (var _i = 0, entities_2 = entities; _i < entities_2.length; _i++) {
            var entity = entities_2[_i];
            if (entity.operations.includes("list".concat(entity.name, "s"))) {
                rules.push({
                    id: this.generateRuleId(),
                    name: "".concat(entity.name, " lists should be paginated"),
                    type: 'performance',
                    severity: 'warning',
                    path: "".concat(entity.name, ".list"),
                    rule: 'limit <= 100',
                    autoGenerated: true
                });
            }
        }
        // Image optimization
        rules.push({
            id: this.generateRuleId(),
            name: 'Images should be optimized',
            type: 'performance',
            severity: 'info',
            path: 'assets.images',
            rule: 'fileSize < 1048576', // 1MB
            autoGenerated: true
        });
        // Bundle size
        rules.push({
            id: this.generateRuleId(),
            name: 'Bundle size should be optimal',
            type: 'performance',
            severity: 'warning',
            path: 'build.bundle',
            rule: 'bundleSize < 5242880', // 5MB
            autoGenerated: true
        });
        return rules;
    };
    ValidationRuleGenerator.prototype.generateSecurityRules = function (entities, types) {
        var rules = [];
        // Password validation
        for (var _i = 0, entities_3 = entities; _i < entities_3.length; _i++) {
            var entity = entities_3[_i];
            var passwordProp = entity.properties.find(function (p) {
                return p.name.toLowerCase().includes('password');
            });
            if (passwordProp) {
                rules.push({
                    id: this.generateRuleId(),
                    name: "".concat(entity.name, ".password must be strong"),
                    type: 'security',
                    severity: 'error',
                    path: "".concat(entity.name, ".").concat(passwordProp.name),
                    rule: "".concat(passwordProp.name, ".length >= 8 && /[A-Z]/.test(").concat(passwordProp.name, ") && /[a-z]/.test(").concat(passwordProp.name, ") && /[0-9]/.test(").concat(passwordProp.name, ")"),
                    autoGenerated: true
                });
                rules.push({
                    id: this.generateRuleId(),
                    name: "".concat(entity.name, ".password must be hashed"),
                    type: 'security',
                    severity: 'error',
                    path: "".concat(entity.name, ".").concat(passwordProp.name),
                    rule: "!".concat(passwordProp.name, ".startsWith('$2b$') || !").concat(passwordProp.name, ".startsWith('$argon2')"),
                    autoGenerated: true
                });
            }
        }
        // SQL injection prevention
        rules.push({
            id: this.generateRuleId(),
            name: 'Prevent SQL injection',
            type: 'security',
            severity: 'error',
            path: 'database.query',
            rule: "!query.includes('DROP') && !query.includes('DELETE FROM') && !query.includes('--')",
            autoGenerated: true
        });
        // XSS prevention
        rules.push({
            id: this.generateRuleId(),
            name: 'Prevent XSS attacks',
            type: 'security',
            severity: 'error',
            path: 'ui.render',
            rule: "!content.includes('<script>') && !content.includes('javascript:')",
            autoGenerated: true
        });
        // Authentication check
        var userEntity = entities.find(function (e) { return e.type === 'user'; });
        if (userEntity) {
            rules.push({
                id: this.generateRuleId(),
                name: 'Protected routes require authentication',
                type: 'security',
                severity: 'error',
                path: 'auth.protected',
                rule: 'user.isAuthenticated === true',
                autoGenerated: true
            });
        }
        return rules;
    };
    ValidationRuleGenerator.prototype.generateRuleId = function () {
        return "rule_".concat(++this.ruleCounter, "_").concat(Date.now());
    };
    return ValidationRuleGenerator;
}());
exports.ValidationRuleGenerator = ValidationRuleGenerator;
